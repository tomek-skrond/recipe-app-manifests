name: "Cluster Preparation"

on:
  repository_dispatch:
    types: [trigger-workflow]
  push:
    branches:
      - test
      - master

env:
    # public vars
    CLUSTER_STATIC_IP: ${{ vars.CLUSTER_STATIC_IP }}
    BUCKET_NAME: ${{ vars.BUCKET_NAME }}
    LETSENCRYPT_EMAIL: ${{ vars.EMAIL }}

    # private vars - pipeline
    CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
    CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
    GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
    COMPUTE_SERVICE_ACCOUNT: ${{ secrets.COMPUTE_ENGINE_SERVICE_ACCOUNT }} #Service account to associate to the nodes in the cluster	any	n/a	yes
    CLUSTER_REGION: ${{ secrets.REGION }}

    # terraform vars
    TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}

jobs:
  setup-gke-cluster:
    name: 'Deploy cluster resources'
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    # Alternative option - authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ env.GOOGLE_CREDENTIALS }}'
  
    - id: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v2'
      with:
        cluster_name: ${{ env.CLUSTER_NAME }}
        location: ${{ env.CLUSTER_REGION }}
        
    - id: 'install-argocd'
      run: |
        if kubectl get namespace argocd &> /dev/null; then
        echo "Namespace argocd already exists."
        else
            kubectl create namespace argocd
            echo "Namespace argocd created."
        fi
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        
    - name: 'Deploy argocd application manifest'
      id: 'argocd-manifest'
      run: |
        kubectl apply -f argocd/

    - name: "Create global static IP in GCP"
      run: |
        if gcloud compute addresses create ${{ env.CLUSTER_STATIC_IP }} --global 2>/dev/null; then
          echo "Created compute address ${{ env.CLUSTER_STATIC_IP }}"
        else
          echo "Address ${{ env.CLUSTER_STATIC_IP }} already exists, skipping creation"
        fi
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: "create cloudflare dns records"
      id: 'tf-cloudflare'
      run: |
        gcloud compute addresses describe ${{ env.CLUSTER_STATIC_IP }} --format='value(address)' --global
        
        export TF_VAR_service_ip=$(gcloud compute addresses describe ${{ env.CLUSTER_STATIC_IP }} --format='value(address)' --global)

        terraform init -backend-config="bucket=${{ env.BUCKET_NAME }}"
        terraform apply -auto-approve -input=false -lock=false

    - name: "create configmap and secret"
      run: |
        cat <<EOF > ./recipe-app/configmap.yaml
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: postgres-config
          namespace: recipe-app
        data:
          postgres-url: postgres
        EOF
        
        cat <<EOF > ./recipe-app/secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: postgres-secret
          namespace: recipe-app
        type: Opaque
        data:
          postgres-pass: ${{ secrets.POSTGRES_PASSWORD }}
          postgres-user: ${{ secrets.POSTGRES_USER }}
          postgres-dbname: ${{ secrets.POSTGRES_DATABASE }}
          postgres-sslmode: ${{ secrets.POSTGRES_SSLMODE }}
        EOF

        kubectl apply -f ./recipe-app/configmap.yaml
        kubectl apply -f ./recipe-app/secret.yaml
    - name: "apply application"
      run: |
        kubectl apply -f ./recipe-app/deployment/postgres/
        kubectl apply -f ./recipe-app/deployment/app/

    - name: "install cert manager"
      id: 'cert-manager'
      run: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml

    - name: "set random number env"
      id: set_random
      run: |
        echo $RANDOM
        echo "RANDOM_NUMBER=$(echo $RANDOM)" >> "$GITHUB_ENV"

    - name: "apply ingress controller"
      id: 'apply-ingress'
      run: |
        echo $RANDOM_NUMBER
        if kubectl get ingress -n recipe-app | grep 'gke-ingress' >/dev/null;then echo "Ingress already exists"; exit 0; fi

        sed -i "s/\(^\s*name: \)gke-[[:alnum:]-]*/\1gke-ingress-$RANDOM_NUMBER/" ./recipe-app/ingress/ingress.yaml
        sed -i 's/kubernetes\.io\/ingress\.global-static-ip-name: .*/kubernetes\.io\/ingress\.global-static-ip-name: ${{ env.CLUSTER_STATIC_IP }}/g' ./recipe-app/ingress/ingress.yaml

        cat ./recipe-app/ingress/ingress.yaml | grep 'global-static-ip-name'

        kubectl apply -f ./recipe-app/ingress/ingress.yaml
        kubectl apply -f ./recipe-app/ingress/certs/secret.yaml


    - name: "Create issuer for letsencrypt production"
      run: |
        echo $RANDOM_NUMBER
        if kubectl get issuer -n recipe-app | grep production >/dev/null;then echo "Production SSL already exists"; exit 0; fi

        sed -i "s/\(^\s*name: \)gke-[[:alnum:]-]*/\1gke-ingress-$RANDOM_NUMBER/" ./recipe-app/ingress/certs/ingress-production.yaml
        sed -i 's/email: .*/email: ${{ env.LETSENCRYPT_EMAIL }}/g' ./recipe-app/ingress/certs/ingress-production.yaml
        cat ./recipe-app/ingress/certs/ingress-staging.yaml

        kubectl apply -f ./recipe-app/ingress/certs/ingress-production.yaml
