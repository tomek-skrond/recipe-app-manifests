name: "ArgoCD"

on:
  repository_dispatch:
    types: [trigger-workflow]
  push:
    branches:
      - test
      - master

env:
    CLUSTER_STATIC_IP: ${{ vars.CLUSTER_STATIC_IP }}
    CLOUDFLARE_API_EMAIL: "tomek2.skrond@gmail.com"

    CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
    CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
    GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
    COMPUTE_SERVICE_ACCOUNT: ${{ secrets.COMPUTE_ENGINE_SERVICE_ACCOUNT }} #Service account to associate to the nodes in the cluster	any	n/a	yes
    CLUSTER_REGION: ${{ secrets.REGION }}

jobs:
  setup-gke-cluster:
    name: 'Deploy cluster resources'
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    # Alternative option - authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ env.GOOGLE_CREDENTIALS }}'
  
    - id: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v2'
      with:
        cluster_name: ${{ env.CLUSTER_NAME }}
        location: ${{ env.CLUSTER_REGION }}
        
    - id: 'install-argocd'
      run: |
        if kubectl get namespace argocd &> /dev/null; then
        echo "Namespace argocd already exists."
        else
            kubectl create namespace argocd
            echo "Namespace argocd created."
        fi
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
    - name: 'Deploy argocd application manifest'
      id: 'argocd-manifest'
      run: |
        kubectl apply -f argocd/
    - name: "install cert manager"
      id: 'cert-manager'
      run: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml

    - name: 'install helm'
      run: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
    - name: 'install externaldns using helm'
      run: |
        if kubectl get secret cloudflare-api-key &> /dev/null; then
          echo "Secret cloudflare-api-key already exists."
        else
          kubectl create secret generic cloudflare-api-key --from-literal=API_KEY=${{ env.CLOUDFLARE_API_TOKEN }} --from-literal=CF_API_EMAIL=${{ env.CLOUDFLARE_API_EMAIL }}
          helm upgrade --install external-dns external-dns/external-dns --values ./externaldns/values.yaml
          echo "Secret cloudflare-api-key created."
        fi


    - name: "kustomize ingress controller"
      id: 'kustomize-certs'
      run: |
        cat <<EOF >./recipe-app/ingress-patch.yaml
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          annotations:
            kubernetes.io/ingress.global-static-ip-name: ${{ env.CLUSTER_STATIC_IP }}
        EOF

        cat <<EOF >./recipe-app/kustomization.yaml
        apiVersion: kustomize.config.k8s.io/v1beta1
        kind: Kustomization
        resources:
        - ingress-controller.yaml
        patchesStrategicMerge:
        - ingress-patch.yaml

        EOF
        cd ./recipe-app/
        kustomize edit fix
        kubectl apply -k .
  # kubectl kustomize edit fix ./recipe-app/kustomization.yaml

  # apiVersion: kustomize.config.k8s.io/v1beta1
  # kind: Kustomization

  # resources:
  # - ingress-controller.yaml

  # patches:
  # - path: ./recipe-app/ingress-patch.yaml
  #   target:
  #     kind: Ingress
  #     name: gke-ingress
  #     namespace: default
  #     version: networking.k8s.io/v1
  #     group: networking.k8s.io
  #     patch: |
  #       - op: replace
  #         path: /metadata/annotations/kubernetes.io~1ingress.global-static-ip-name
  #         value: ${{ env.CLUSTER_STATIC_IP }}
